syntax = "proto2";

package frc971.control_loops.drivetrain;

option cc_enable_arenas = true;

enum Gear {
  kHighGear = 0;
  kLowGear = 1;
  kShiftingUp = 2;
  kShiftingDown = 3;
}

message MotionProfileConstraints {
  required double max_velocity = 1;
  required double max_acceleration = 2;
}

message DrivetrainGoal {
  required uint64 timestamp = 1;
  message TeleopCommand {
    // Positive is left, -1 to 1
    required double steering = 1;

    // Positive is forwards, -1 to 1
    required double throttle = 2;

    required bool quick_turn = 4;

    // Use a closed-loop controller (false is open-loop)
    required bool closed_loop = 5;
  }

  message VelocityCommand {
    required double left_velocity_goal = 1;
    required double right_velocity_goal = 2;
  }

  message DistanceCommand {
    required double left_goal = 1;
    required double right_goal = 2;
    required double left_velocity_goal = 3;
    required double right_velocity_goal = 4;
  }

  message PathCommand {
    required double x_goal = 1;
    required double y_goal = 2;
    required double theta_goal = 3;

    // How much voltage to allow trajectory to use
    // Needlessly low => slower
    // Too high => weak corrections, causing drift or shaking
    required double max_voltage = 4;

    // Set this to override the default directionality selection
    optional bool backwards = 5;

    // Set this to fudge the shape of the path to avoid obstacles.
    // Adds to the starting tangent of the path so the beginning or ending
    // mostly straight section is longer by approximately the specified amount.
    // If there is forward velocity and not angular velocity, negative
    // extra distance may prevent the robot from deccelerating fast enough.

    // Also note that the acceleration component of a pentic hermite is
    // very small, so if the angular velocity at either end is significant,
    // extra distance at that end may need to be added (in the event that the
    // angular velocity is opposite the turn it would have otherwise) or
    // subtracted (in the event that it is in the same direction) if you get
    // warnings about velocity being too high on one side.
    optional double extra_distance_initial = 6;
    optional double extra_distance_final = 7;

    optional double final_velocity = 8;
    optional double final_angular_velocity = 9;
  }

  required Gear gear = 2;

  oneof command {
    TeleopCommand teleop_command = 3;
    VelocityCommand velocity_command = 4;
    DistanceCommand distance_command = 5;
    PathCommand path_command = 6;
  }

  optional MotionProfileConstraints linear_constraints = 7;
  optional MotionProfileConstraints angular_constraints = 8;
}

message DrivetrainInput {
  required uint64 timestamp = 1;
  // In meters, positive is forwards
  required double left_encoder = 2;
  required double right_encoder = 3;

  // Position of each drivetrain shifter, scaled from 0.0 to 1.0 where smaller
  // is towards low gear.
  required double left_shifter_position = 4;
  required double right_shifter_position = 5;

  // Raw analog voltages of each shifter hall effect for logging purposes.
  required double low_left_hall = 6;
  required double high_left_hall = 7;
  required double low_right_hall = 8;
  required double high_right_hall = 9;
}

message DrivetrainOutput {
  required uint64 timestamp = 1;
  // Voltage, positive is forwards
  required double left_voltage = 2;
  required double right_voltage = 3;

  // True is high gear
  required bool high_gear = 4;
}

message DrivetrainStatus {
  required uint64 timestamp = 1;
  // Estimated forwards velocity (of the center of the robot) in m/s, forwards
  // is positive
  required double forward_velocity = 2;
  required double angular_velocity = 3;
  required double forward_acceleration = 4;
  required double angular_acceleration = 5;

  // Estimated position of each drivetrain side in meters, forwards is positive
  required double estimated_left_position = 6;
  required double estimated_right_position = 7;

  // Estimated velocity of each drivetrain side in m/s, forwards is positive
  required double estimated_left_velocity = 8;
  required double estimated_right_velocity = 9;

  // The voltage we wanted to send to each drivetrain side last cycle.
  required double uncapped_left_voltage = 10;
  required double uncapped_right_voltage = 11;

  // The goal velocities for the polydrive controller.
  required double left_velocity_goal = 12;
  required double right_velocity_goal = 13;

  // The voltage error for the left and right sides.
  required double left_voltage_error = 14;
  required double right_voltage_error = 15;

  // The profiled goal states.
  required double profiled_left_position_goal = 16;
  required double profiled_right_position_goal = 17;
  required double profiled_left_velocity_goal = 18;
  required double profiled_right_velocity_goal = 19;

  // The KF offset
  required double estimated_angular_velocity_error = 20;
  // The KF estimated heading.
  required double estimated_heading = 21;

  required double estimated_x_position = 22;
  required double estimated_y_position = 23;

  // True if the output voltage was capped last cycle.
  required bool output_was_capped = 24;

  message PathStatus {
    required double profiled_x_goal = 1;
    required double profiled_y_goal = 2;
    required double profiled_heading_goal = 3;
    required double distance_remaining = 4;
    required double time_remaining = 5;
    required bool profile_complete = 6;
  }

  optional PathStatus path_status = 25;
}
