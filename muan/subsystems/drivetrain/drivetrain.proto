syntax = "proto2";

option cc_enable_arenas = true;

package muan.subsystems.drivetrain;

message DrivetrainInput {
  required uint64 timestamp = 1;
  
  required double left_encoder = 2;
  required double right_encoder = 3;

  required double left_velocity = 4;
  required double right_velocity = 5;

  required double left_voltage = 6;
  required double right_voltage = 7;

  required double left_current = 8;
  required double right_current = 9;

  required double gyro = 10;

  required double right_bus = 11;
}

enum TalonOutput {
  OPEN_LOOP = 0;
  POSITION = 1;
  VELOCITY = 2;
  ARC = 3;
}

message DrivetrainOutput {
  required uint64 timestamp = 1;

  required TalonOutput output_type = 2;
  
  required double left_setpoint = 3;
  required double right_setpoint = 4;
  
  optional double left_setpoint_ff = 5;
  optional double right_setpoint_ff = 6;

  required bool high_gear = 7;

  required double yaw = 8;
  required double arc_vel = 9;
}

enum ControlMode {
    PATH_FOLLOWING = 0;
    POINT_TURN = 1;
    DISTANCE = 2;
    LEFT_RIGHT = 3;
    LINEAR_ANGULAR_VEL = 4;
    VISION_ARC = 5;
}

message DrivetrainStatus {
  required uint64 timestamp = 1;

  required double estimated_x_position = 2;
  required double estimated_y_position = 3;
  required double estimated_heading = 4;

  required double linear_velocity = 5;
  required double angular_velocity = 6;

  optional double x_error = 7;
  optional double y_error = 8;
  optional double heading_error = 9;

  optional double x_goal = 10;
  optional double y_goal = 11;
  optional double heading_goal = 12;

  optional double profiled_x_goal = 13;
  optional double profiled_y_goal = 14;
  optional double profiled_heading_goal = 15;

  optional double profiled_velocity_goal = 16;
  optional double profiled_acceleration_goal = 17;
  optional double profiled_curvature_goal = 18;
  optional double adjusted_velocity_goal = 19;

  optional double pred_lin_accel = 20;
  optional double pred_ang_accel = 21;

  optional double estimated_lin_accel = 22;
  optional double estimated_ang_accel = 23;

  optional bool profile_complete = 24;

  optional ControlMode closed_loop_control_mode = 25;
  optional double encoder_heading = 26;

  optional double dt = 27;
  optional bool point_turn_complete = 28;
}

message DrivetrainGoal {
  required uint64 timestamp = 1;

  message TeleopGoal {
    required double throttle = 1;
    required double steering = 2;
    
    required bool quick_turn = 3;
  }

  message PathGoal {
    required double x = 1;
    required double y = 2;
    required double heading = 3;
    required double max_voltage = 4;

    optional bool backwards = 5;
    optional double extra_distance_initial = 6;
    optional double extra_distance_final = 7;
    optional double final_velocity = 8;
    optional double final_angular_velocity = 9;

    optional double max_linear_velocity = 10;
    optional double max_linear_accel = 11;
    optional double max_centripetal_accel = 12;

    optional bool full_send = 13;
  }

  message LeftRightGoal {
    required double left_goal = 1;
    required double right_goal = 2;
  }

  message LinearAngularVelocityGoal {
    required double linear_velocity = 1;
    required double angular_velocity = 2;
  }

  message ArcGoal {
    required double linear = 1;
    required double angular = 2;
  }

  required bool high_gear = 2;

  oneof goal {
    TeleopGoal teleop_goal = 3;
    PathGoal path_goal = 4;
    double point_turn_goal = 5;
    double distance_goal = 6;
    LeftRightGoal left_right_goal = 7;
    LinearAngularVelocityGoal linear_angular_velocity_goal = 8;
    ArcGoal arc_goal = 9;
  }
}
