syntax = "proto2";

option cc_enable_arenas = true;

package c2018.score_subsystem;

enum ScoreGoal {
  SCORE_NONE = 0; // Let the state machine progress
  INTAKE_0 = 1;
  INTAKE_1 = 2;
  INTAKE_2 = 3;
  STOW = 4;
  SWITCH = 5;
  EXCHANGE = 6;
  PORTAL = 7;
  SCALE_LOW_FORWARD = 8;
  SCALE_LOW_REVERSE = 9;
  SCALE_MID_FORWARD = 10;
  SCALE_MID_REVERSE = 11;
  SCALE_HIGH_FORWARD = 12;
  SCALE_HIGH_REVERSE = 13;
  SCALE_SUPER_HIGH_FORWARD = 14;
  SCALE_SUPER_HIGH_REVERSE = 15;
  SCALE_SHOOT = 16;
}

message ScoreSubsystemInput {
  required uint64 timestamp = 1;
  required double elevator_encoder = 2;
  required bool elevator_hall = 3;
  required double wrist_encoder = 4;
  required bool wrist_hall = 5;
  required double intake_current = 6;
  required bool has_cube = 7;
}

message ScoreSubsystemOutput {
  required uint64 timestamp = 1;
  required double elevator_voltage = 2;
  required double intake_voltage = 3;
  required double wrist_voltage = 4;
  required bool wrist_solenoid_open = 5;
  required bool wrist_solenoid_close = 6;
}

enum IntakeGoal {
  // Doing nothing - not running the intake; just hold the cube if we have one
  INTAKE_NONE = 0;
  // The default intake mode
  INTAKE = 1;
  // Usually to be used in series - open the intake, then close it around a cube
  // while running it
  INTAKE_OPEN = 2;
  INTAKE_CLOSE = 3;
  // Intaking, but pinched and ignoring the sensor for state transitions
  SETTLE = 4;
  // Spit out at different speeds (for scoring)
  OUTTAKE_SLOW = 5;
  OUTTAKE_FAST = 6;
  // Drop it without running the intake
  DROP = 7;
}

message ScoreSubsystemGoal {
  required uint64 timestamp = 1;
  required ScoreGoal score_goal = 2;

  // What we _should_ be doing (if it's supposed to be intaking then it will
  // continue through transitions if it has a cube)
  required IntakeGoal intake_goal = 3;
}

enum ScoreSubsystemState {
  CALIBRATING = 0;
  HOLDING = 1;
  INTAKING_TO_STOW = 2;
  INTAKING_ONLY = 3;
}

message ScoreSubsystemStatus {
  required uint64 timestamp = 1;
  required double elevator_actual_height = 2;
  required double estimated_velocity = 3;
  required bool elevator_at_top = 4;
  required double elevator_voltage_error = 5;
  required double elevator_uncapped_voltage = 6;
  required double elevator_profiled_goal = 7;
  required double elevator_unprofiled_goal = 8;
  required bool elevator_encoder_fault_detected = 9;
  required double elevator_calibration_offset = 10;
  required ScoreSubsystemState state = 11;
  required bool elevator_calibrated = 12;
  required double wrist_angle = 13;
  required double wrist_velocity = 14;
  required bool wrist_calibrated = 15;
  required double wrist_profiled_goal = 16;
  required double wrist_unprofiled_goal = 17;
  required double wrist_calibration_offset = 18;
  required bool claw_pinch = 19;
  required bool has_cube = 20;
  required double wrist_time_left = 21;
  required double elevator_time_left = 22;
  required IntakeGoal intake_state = 23;
}
